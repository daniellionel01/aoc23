# Advent of Code 2023

```elixir
Mix.install([
  {:kino, "~> 0.14.1"}
])
```

## Day 1

```elixir
input = Kino.Input.textarea("")
```

```elixir
# input = """
# Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
# Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
# Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
# Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
# Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
# """

input = input
|> Kino.Input.read()

config = %{
  "red" => 12,
  "green" => 13,
  "blue" => 14
}
```

```elixir
# PART 1

input
|> String.split("\n", trim: true)
|> Enum.map(fn line ->
  [id, games] = String.split(line, ":")

  id = id
    |> String.replace("Game ", "")
    |> String.to_integer()

  games = games
    |> String.trim()
    |> String.split(";")
    |> Enum.map(&String.trim/1)
    |> Enum.map(fn rounds ->
      rounds
      |> String.split(", ")
      |> Enum.map(fn pair ->
        [n, color] = pair
        |> String.split(" ")

        [n, color]
      end)
      |> Enum.group_by(& Enum.at(&1, 1), fn x -> x |> Enum.at(0) |> String.to_integer end)
      |> Enum.map(fn {k, v} -> {k, List.first(v)} end)
      |> Enum.into(%{})
    end)

  { id, games }
end)
|> Enum.filter(fn { _id, rounds } ->
  impossible = rounds
    |> Enum.map(&Map.to_list/1)
    |> List.flatten()
    |> Enum.filter(fn { c, n } -> n > config[c] end)

  length(impossible) == 0
end)
|> Enum.map(fn { id, _rounds } -> id end)
|> Enum.sum()
```

```elixir
# PART 2

input
|> String.split("\n", trim: true)
|> Enum.map(fn line ->
  [_, games] = String.split(line, ":")

  games = games
    |> String.trim()
    |> String.split(";")
    |> Enum.map(&String.trim/1)
    |> Enum.map(fn rounds ->
      rounds
      |> String.split(", ")
      |> Enum.map(fn pair ->
        [n, color] = pair
        |> String.split(" ")

        [n, color]
      end)
      |> Enum.group_by(& Enum.at(&1, 1), fn x -> x |> Enum.at(0) |> String.to_integer end)
      |> Enum.map(fn {k, v} -> {k, List.first(v)} end)
      |> Enum.into(%{})
    end)

  games
end)
|> Enum.map(fn rounds ->
  rounds
  |> Enum.map(&Map.to_list/1)
  |> List.flatten()
  |> Enum.reduce(%{}, fn el, acc ->
    {col, n} = el
    cur = Map.get(acc, col, 0)
    if n > cur do
      Map.put(acc, col, n)
    else
      acc
    end
  end)
  |> Map.values()
  |> Enum.product()
end)
|> Enum.sum()
```
